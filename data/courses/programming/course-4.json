{
    "id": "C4",
    "index": 3,
    "slug": "course-4",
    "language": "Java",
    "courseTitle": "Learn Java Programming",
    "courseDescription": "Dive into Java programming from basics to advanced concepts including OOP, collections, and concurrency.",
    "courseBannerImageLink": "https://raw.githubusercontent.com/nirmalravidas/e-learning-programming-course-app-server/main/public/images/courses/java/banner_image.png",
    "pricingType": "free",
    "bookmarked": false,
    "modules": [
        {
            "moduleId": "C4-M1",
            "moduleTitle": "Java Overview",
            "topics": [
                {
                    "topicId": "C4-M1-T1",
                    "topicTitle": "What is Java?",
                    "topicContent": "**Java** is a high-level, object-oriented programming language designed to be platform-independent.\n\nIt runs on the **Java Virtual Machine (JVM)**, which enables Java code to run on any device that has the JVM installed.\n ------------- \n**Key Features:**\n- Object-Oriented\n- Platform Independent\n- Secure\n- Robust\n- Multithreaded\n ------------- \n**Example:**\n```java\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\nThis program prints \"Hello, World!\" to the console.\n```text\nHello, World!```\n"
                },
                {
                    "topicId": "C4-M1-T2",
                    "topicTitle": "Features of Java",
                    "topicContent": "**Important Features of Java:**\n\n- **Simple:** Easy to learn and use.\n- **Object-Oriented:** Everything is an object.\n- **Platform Independent:** Write once, run anywhere.\n- **Robust:** Strong memory management and exception handling.\n- **Secure:** Provides a secure environment for code execution.\n- **Multithreaded:** Supports concurrent execution of multiple threads.\n- **High Performance:** Uses Just-In-Time compiler.\n- **Distributed:** Supports networking capabilities.\n ------------- \n**Example:**\n```code\n// Multithreading Example\nclass MyThread extends Thread {\n    public void run() {\n        System.out.println(\"Thread running\");\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        MyThread t1 = new MyThread();\n        t1.start();\n    }\n}\n```\nThis creates and starts a new thread.\n```Thread running```\n"
                },
                {
                    "topicId": "C4-M1-T3",
                    "topicTitle": "Java Platform (JDK, JRE, JVM)",
                    "topicContent": "**Java Platform Components:**\n\n- **JDK (Java Development Kit):** Includes tools for developing Java applications (compiler, debugger, etc.)\n- **JRE (Java Runtime Environment):** Provides libraries and JVM for running Java programs\n- **JVM (Java Virtual Machine):** Executes Java bytecode and provides platform independence\n ------------- \n**Diagram:**\nJDK -> JRE -> JVM -> Java Program\n ------------- \n**Example:**\n```code\n// Compile Java source code\njavac HelloWorld.java\n\n// Run the compiled bytecode\njava HelloWorld\n```\nThis compiles and runs a Java program."
                },
                {
                    "topicId": "C4-M1-T4",
                    "topicTitle": "Installing Java and Setup",
                    "topicContent": "**Steps to Install Java:**\n\n1. Download the JDK from the [Oracle website](https://www.oracle.com/java/technologies/javase-downloads.html) or use OpenJDK.\n2. Install the JDK.\n3. Set environment variables:\n   - **JAVA_HOME** pointing to the JDK directory\n   - Add **JAVA_HOME/bin** to the system **PATH**\n4. Verify installation by running:\n```code\njava -version\njavac -version\n```\n ------------- \n**Example Output:**\n```code\njava version \"17.0.1\" 2021-10-19 LTS\nJava(TM) SE Runtime Environment (build 17.0.1+12-LTS-39)\nJava HotSpot(TM) 64-Bit Server VM (build 17.0.1+12-LTS-39, mixed mode, sharing)\n```\n"
                },
                {
                    "topicId": "C4-M1-T5",
                    "topicTitle": "Your First Java Program",
                    "topicContent": "**Writing Your First Java Program:**\n\nCreate a file called `HelloWorld.java` with the following code:\n```code\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n ------------- \n**Compile the Program:**\n```code\njavac HelloWorld.java\n```\n ------------- \n**Run the Program:**\n```code\njava HelloWorld\n```\n ------------- \n**Output:**\n```Hello, World!```\n\nThis shows a basic Java program that prints a message to the console."
                }
            ]
        },

        {
            "moduleId": "C4-M2",
            "moduleTitle": "Java Basics",
            "topics": [
                {
                "topicId": "C4-M2-T1",
                "topicTitle": "Variables and Data Types",
                "topicContent": "Java supports various data types like int, float, char, boolean, and reference types like arrays and objects."
                },

                {
                "topicId": "C4-M2-T2",
                "topicTitle": "Control Statements",
                "topicContent": "Java provides control statements like if-else, switch, for loop, while loop, and do-while loop for decision making and looping."
                }
            ]
        },

        {
            "moduleId": "C4-M3",
            "moduleTitle": "Java Flow Control",
            "topics": [
                {   
                    "topicId": "C4-M3-T1",
                    "topicTitle": "Classes and Objects",
                    "topicContent": "In Java, a class is a blueprint for creating objects. An object is an instance of a class. A class can have attributes and methods."
                }
            ]
        },

        {
            "moduleId": "C4-M4",
            "moduleTitle": "Java Methods",
            "topics": [
                {
                    "topicId": "C4-M4-T1",
                    "topicTitle": "Arrays",
                    "topicContent": "An array is a collection of elements of the same type. It is a fixed-sized data structure that stores a group of elements of the same type."
                },
                {
                    "topicId": "C4-M4-T2",
                    "topicTitle": "Lists",
                    "topicContent": "A list is a collection of elements that can be dynamically resized. It is an ordered collection of elements that allows duplicate elements."
                },
                {
                    "topicId": "C4-M4-T3",
                    "topicTitle": "Maps",
                    "topicContent": "A map is a collection of key-value pairs. It is an unordered collection of elements that allows duplicate keys."
                },
                {
                    "topicId": "C4-M4-T4",
                    "topicTitle": "Sets",
                    "topicContent": "A set is a collection of unique elements. It is an unordered collection of elements that does not allow duplicate elements."
                }
            ]
        },

        {
            "moduleId": "C4-M5",
            "moduleTitle": "Java Arrays",
            "topics": [
                {
                    "topicId": "C4-M5-T1",
                    "topicTitle": "Collections Framework",
                    "topicContent": "The Java Collections Framework provides a set of interfaces and classes for storing, organizing, and manipulating collections of objects."
                }
            ]
        },

        {
            "moduleId": "C4-M6",
            "moduleTitle": "Java Strings",
            "topics": [
                {
                    "topicId": "C4-M6-T1",
                    "topicTitle": "Collections Framework",
                    "topicContent": "The Java Collections Framework provides a set of interfaces and classes for storing, organizing, and manipulating collections of objects."
                }
            ]
        },

        {
            "moduleId": "C4-M7",
            "moduleTitle": "Java OOPs Concepts",
            "topics": [
                {
                    "topicId": "C4-M7-T1",
                    "topicTitle": "Collections Framework",
                    "topicContent": "The Java Collections Framework provides a set of interfaces and classes for storing, organizing, and manipulating collections of objects."
                }
            ]
        },

        {
            "moduleId": "C4-M8",
            "moduleTitle": "Java Interfaces",
            "topics": [
                {
                    "topicId": "C4-M8-T1",
                    "topicTitle": "Collections Framework",
                    "topicContent": "The Java Collections Framework provides a set of interfaces and classes for storing, organizing, and manipulating collections of objects."
                }
            ]
        },

        {
            "moduleId": "C4-M9",
            "moduleTitle": "Java Collections",
            "topics": [
                {
                    "topicId": "C4-M9-T1",
                    "topicTitle": "Collections Framework",
                    "topicContent": "The Java Collections Framework provides a set of interfaces and classes for storing, organizing, and manipulating collections of objects."
                }
            ]
        },

        {
            "moduleId": "C4-M10",
            "moduleTitle": "Java Exception Handling",
            "topics": [
                {
                    "topicId": "C4-M10-T1",
                    "topicTitle": "Collections Framework",
                    "topicContent": "The Java Collections Framework provides a set of interfaces and classes for storing, organizing, and manipulating collections of objects."
                }
            ]
        },

        {
            "moduleId": "C4-M11",
            "moduleTitle": "Java Multithreading",
            "topics": [
                {
                    "topicId": "C4-M11-T1",
                    "topicTitle": "Collections Framework",
                    "topicContent": "The Java Collections Framework provides a set of interfaces and classes for storing, organizing, and manipulating collections of objects."
                }
            ]
        },

        {
            "moduleId": "C4-M12",
            "moduleTitle": "Java File Handling",
            "topics": [
                {
                    "topicId": "C4-M12-T1",
                    "topicTitle": "Collections Framework",
                    "topicContent": "The Java Collections Framework provides a set of interfaces and classes for storing, organizing, and manipulating collections of objects."
                }
            ]
        },

        {
            "moduleId": "C4-M13",
            "moduleTitle": "Java Input-Output",
            "topics": [
                {
                    "topicId": "C4-M13-T1",
                    "topicTitle": "Collections Framework",
                    "topicContent": "The Java Collections Framework provides a set of interfaces and classes for storing, organizing, and manipulating collections of objects."
                }
            ]
        }




    ]
}
