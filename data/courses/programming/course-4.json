{
  "id": "C4",
  "index": 3,
  "slug": "course-4",
  "language": "Java",
  "courseTitle": "Learn Java Programming",
  "courseDescription": "Dive into Java programming from basics to advanced concepts including OOP, collections, and concurrency.",
  "courseBannerImageLink": "https://raw.githubusercontent.com/nirmalravidas/e-learning-programming-course-app-server/main/public/images/courses/java/banner_image.png",
  "pricingType": "free",
  "bookmarked": false,
  "modules": [
    {
      "moduleId": "C4-M1",
      "moduleTitle": "Java Overview",
      "topics": [
        {
          "topicId": "C4-M1-T1",
          "topicTitle": "What is Java?",
          "topicContent": "**What is Java?**\n\nJava is a popular programming language created by Sun Microsystems in 1995. It is designed to be simple, portable, and easy to use.\n\n**Key points:**\n- Java is **platform-independent**, meaning you can write Java code once and run it anywhere without changes.\n- It is an **object-oriented** language, which means it organizes software design around data, or objects, rather than functions and logic.\n- Java runs on the **Java Virtual Machine (JVM)**, which translates Java bytecode into machine code for your computer.\n\n-------------\n\n**Example:** Your first Java program looks like this:\n```java\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\nThis program prints the message \"Hello, World!\" on the screen.\n\n```java\nOutput:\n\nHello, World!\n```\n"
        },
        {
          "topicId": "C4-M1-T2",
          "topicTitle": "Features of Java",
          "topicContent": "**Features of Java**\n\nJava has many features that make it a powerful and widely-used language:\n\n- **Simple:** Java has a clean and easy-to-understand syntax.\n- **Object-Oriented:** Everything in Java is treated as an object.\n- **Platform Independent:** Thanks to the JVM, Java programs can run on different platforms like Windows, Mac, or Linux without modification.\n- **Robust:** Java provides strong memory management and exception handling, which helps reduce errors.\n- **Secure:** Java provides a secure environment to develop and run applications.\n- **Multithreaded:** Java supports multiple threads, which lets your program do many things at once.\n- **High Performance:** Java uses Just-In-Time (JIT) compiler to speed up execution.\n\n-------------\n\n**Example:** Creating a thread in Java\n```java\nclass MyThread extends Thread {\n    public void run() {\n        System.out.println(\"Thread is running\");\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        MyThread t = new MyThread();\n        t.start();\n    }\n}\n```\n\nThis program creates and starts a new thread.\n\n```java\nOutput:\n\nThread is running\n```\n"
        },
        {
          "topicId": "C4-M1-T3",
          "topicTitle": "Java Platform (JDK, JRE, JVM)",
          "topicContent": "**Understanding the Java Platform:**\n\nJava platform consists of three main components:\n\n- **JDK (Java Development Kit):** This is the full kit used by developers. It contains tools like the compiler (`javac`), debugger, and other utilities needed to write, compile, and debug Java programs.\n\n- **JRE (Java Runtime Environment):** This includes everything you need to run a Java program, such as the JVM and standard Java class libraries. It does NOT include developer tools like the compiler.\n\n- **JVM (Java Virtual Machine):** The JVM is responsible for running Java bytecode on any device or operating system. It acts as an interpreter between the Java program and your computer’s operating system.\n\n-------------\n\n**Visual Flow:**\n\n```\nJava Source Code (.java) -> Compiler (javac) -> Bytecode (.class) -> JVM -> Machine Code -> Run\n```\n\n-------------\n\n**Example:** Compiling and running a Java program\n```java\n// Compile\njavac HelloWorld.java\n\n// Run\njava HelloWorld\n```\n\nThe compiler converts your source code into bytecode, and the JVM runs it.\n"
        },
        {
          "topicId": "C4-M1-T4",
          "topicTitle": "Installing Java and Setup",
          "topicContent": "**How to Install Java:**\n\nFollow these simple steps to install Java on your computer:\n\n1. **Download the JDK:** Go to the official [Oracle Java SE Downloads](https://www.oracle.com/java/technologies/javase-downloads.html) page or use OpenJDK.\n2. **Install the JDK:** Run the installer and follow the instructions.\n3. **Set Environment Variables:**\n   - Set `JAVA_HOME` to point to the folder where JDK is installed.\n   - Add `JAVA_HOME/bin` to your system `PATH` to access Java commands from any directory.\n\n4. **Verify the Installation:** Open the command prompt or terminal and type:\n```java\njava -version\njavac -version\n```\nYou should see the installed Java version.\n\n-------------\n\n**Example Output:**\n```java\nOutput:\n\njava version \"17.0.1\" 2021-10-19 LTS\nJava(TM) SE Runtime Environment (build 17.0.1+12-LTS-39)\nJava HotSpot(TM) 64-Bit Server VM (build 17.0.1+12-LTS-39, mixed mode, sharing)\n```\n"
        },
        {
          "topicId": "C4-M1-T5",
          "topicTitle": "Your First Java Program",
          "topicContent": "**Let's Write Your First Java Program!**\n\n1. Open a text editor and create a file named `HelloWorld.java`.\n2. Type the following code:\n```java\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\n3. Save the file.\n4. Open your terminal or command prompt and navigate to the folder where you saved the file.\n5. Compile the program by typing:\n```java\njavac HelloWorld.java\n```\nThis creates a file called `HelloWorld.class` (the bytecode).\n6. Run the program by typing:\n```java\njava HelloWorld\n```\n\n-------------\n\n**Output:**\n```java\nOutput:\n\nHello, World!\n```\n\nCongratulations! You have successfully written, compiled, and run your first Java program.\n"
        }
      ]
    },
    {
      "moduleId": "C4-M2",
      "moduleTitle": "Java Basics",
      "topics": [
        {
          "topicId": "C4-M2-T1",
          "topicTitle": "Variables and Data Types",
          "topicContent": "**Variables and Data Types in Java**\n\nVariables are used to store data in a program. Each variable has a data type that tells the compiler what kind of data it will hold.\n\n**Common data types:**\n- `int` — stores integers (whole numbers) like 1, 100, -50\n- `double` — stores decimal numbers like 3.14, -0.001\n- `char` — stores a single character like 'A', 'z'\n- `boolean` — stores true or false\n- `String` — stores a sequence of characters (text)\n\n**Declaring variables:**\n```java\nint age = 25;\ndouble price = 19.99;\nchar grade = 'A';\nboolean isJavaFun = true;\nString name = \"Nirmal\";\n```\n\n**Using variables:**\n```java\nSystem.out.println(\"Age: \" + age);\n```\n\n-------------\n\nExample program:\n```java\npublic class VariablesDemo {\n    public static void main(String[] args) {\n        int number = 10;\n        double pi = 3.14159;\n        char letter = 'J';\n        boolean isRaining = false;\n        String greeting = \"Hello Java\";\n\n        System.out.println(\"Number: \" + number);\n        System.out.println(\"Pi: \" + pi);\n        System.out.println(\"Letter: \" + letter);\n        System.out.println(\"Is it raining? \" + isRaining);\n        System.out.println(greeting);\n    }\n}\n```\n\n```java\nOutput:\n\nNumber: 10\nPi: 3.14159\nLetter: J\nIs it raining? false\nHello Java\n```\n"
        },
        {
          "topicId": "C4-M2-T2",
          "topicTitle": "Operators in Java",
          "topicContent": "**Operators in Java**\n\nOperators are special symbols that perform operations on variables and values.\n\n**Types of operators:**\n- Arithmetic: `+`, `-`, `*`, `/`, `%` (modulus)\n- Assignment: `=`, `+=`, `-=`, `*=`, `/=`\n- Comparison: `==`, `!=`, `>`, `<`, `>=`, `<=`\n- Logical: `&&` (and), `||` (or), `!` (not)\n\n**Example:**\n```java\nint a = 10;\nint b = 3;\nint sum = a + b;\nint product = a * b;\nboolean isEqual = (a == b);\nboolean isGreater = (a > b) && (b > 0);\n```\n\n-------------\n\nExample program:\n```java\npublic class OperatorsDemo {\n    public static void main(String[] args) {\n        int x = 15;\n        int y = 4;\n\n        System.out.println(\"x + y = \" + (x + y));\n        System.out.println(\"x - y = \" + (x - y));\n        System.out.println(\"x * y = \" + (x * y));\n        System.out.println(\"x / y = \" + (x / y));\n        System.out.println(\"x % y = \" + (x % y));\n\n        System.out.println(\"x == y: \" + (x == y));\n        System.out.println(\"x != y: \" + (x != y));\n        System.out.println(\"x > y && y > 0: \" + ((x > y) && (y > 0)));\n    }\n}\n```\n\n```java\n// Output:\n\nx + y = 19\nx - y = 11\nx * y = 60\nx / y = 3\nx % y = 3\nx == y: false\nx != y: true\nx > y && y > 0: true\n```\n"
        },
        {
          "topicId": "C4-M2-T3",
          "topicTitle": "Control Flow: if, else, switch",
          "topicContent": "**Control Flow Statements**\n\nControl flow statements help decide which code blocks run depending on conditions.\n\n- **if-else statement:** Executes code when a condition is true or false.\n- **switch statement:** Selects one of many code blocks to execute based on a variable’s value.\n\n**Syntax:**\n```java\nif (condition) {\n    // code if true\n} else {\n    // code if false\n}\n```\n\n```java\nswitch(expression) {\n    case value1:\n        // code\n        break;\n    case value2:\n        // code\n        break;\n    default:\n        // code\n}\n```\n\n-------------\n\nExample program:\n```java\npublic class ControlFlowDemo {\n    public static void main(String[] args) {\n        int score = 85;\n\n        if (score >= 90) {\n            System.out.println(\"Grade: A\");\n        } else if (score >= 75) {\n            System.out.println(\"Grade: B\");\n        } else {\n            System.out.println(\"Grade: C or below\");\n        }\n\n        int day = 3;\n        switch(day) {\n            case 1: System.out.println(\"Monday\"); break;\n            case 2: System.out.println(\"Tuesday\"); break;\n            case 3: System.out.println(\"Wednesday\"); break;\n            default: System.out.println(\"Other day\");\n        }\n    }\n}\n```\n\n```java\n\n// Output:\nGrade: B\nWednesday\n```\n"
        },
        {
          "topicId": "C4-M2-T4",
          "topicTitle": "Loops: for, while, do-while",
          "topicContent": "**Loops in Java**\n\nLoops allow us to repeat a block of code multiple times.\n\n**Types of loops:**\n- `for` loop: repeats code a specific number of times.\n- `while` loop: repeats code while a condition is true.\n- `do-while` loop: similar to while, but runs at least once.\n\n**Syntax:**\n```java\nfor (initialization; condition; update) {\n    // code\n}\n```\n```java\nwhile (condition) {\n    // code\n}\n```\n```java\ndo {\n    // code\n} while (condition);\n```\n\n-------------\n\nExample program:\n```java\npublic class LoopsDemo {\n    public static void main(String[] args) {\n        System.out.println(\"For loop:\");\n        for (int i = 1; i <= 5; i++) {\n            System.out.println(i);\n        }\n\n        System.out.println(\"While loop:\");\n        int j = 1;\n        while (j <= 5) {\n            System.out.println(j);\n            j++;\n        }\n\n        System.out.println(\"Do-While loop:\");\n        int k = 1;\n        do {\n            System.out.println(k);\n            k++;\n        } while (k <= 5);\n    }\n}\n```\n\n```java\n\n// Output:\nFor loop:\n1\n2\n3\n4\n5\nWhile loop:\n1\n2\n3\n4\n5\nDo-While loop:\n1\n2\n3\n4\n5\n```\n"
        },
        {
          "topicId": "C4-M2-T5",
          "topicTitle": "Type Casting and Type Promotion",
          "topicContent": "**Type Casting and Type Promotion**\n\nJava sometimes automatically converts one data type to another. This is called **type promotion**.\n\nYou can also manually convert a type, called **type casting**.\n\n- **Type Promotion:** Smaller types like `byte`, `short`, `char` get promoted to `int` when used in expressions.\n- **Type Casting:** You explicitly convert from one type to another.\n\n**Example:**\n```java\nint i = 100;\ndouble d = i; // Automatic promotion from int to double\n\ndouble pi = 3.14;\nint x = (int) pi; // Manual casting from double to int\nSystem.out.println(x); // prints 3\n```\n\n-------------\n\nExample program:\n```java\npublic class CastingDemo {\n    public static void main(String[] args) {\n        byte b = 10;\n        int i = b; // promotion\n\n        double d = 9.78;\n        int castInt = (int) d; // casting\n\n        System.out.println(\"Byte value: \" + b);\n        System.out.println(\"Promoted to int: \" + i);\n        System.out.println(\"Double value: \" + d);\n        System.out.println(\"Casted to int: \" + castInt);\n    }\n}\n```\n\n```java\n\n// Output:\nByte value: 10\nPromoted to int: 10\nDouble value: 9.78\nCasted to int: 9\n```\n"
        }
      ]
    },
    {
      "moduleId": "C4-M3",
      "moduleTitle": "Java Flow Control",
      "topics": [
        {
          "topicId": "C4-M3-T1",
          "topicTitle": "Decision Making Statements",
          "topicContent": "**Decision Making Statements**\n\nThese statements let your program make decisions based on conditions.\n\nYou use `if`, `else if`, `else` and `switch` to control the flow.\n\n**if statement:** Executes code if condition is true.\n\n**else if:** Checks another condition if the first is false.\n\n**else:** Runs code if all previous conditions are false.\n\nExample:\n```java\nint age = 20;\nif (age >= 18) {\n    System.out.println(\"You are an adult.\");\n} else {\n    System.out.println(\"You are a minor.\");\n}\n```\n\n-------------\n\nExample program:\n```java\npublic class DecisionDemo {\n    public static void main(String[] args) {\n        int temperature = 30;\n        if (temperature > 35) {\n            System.out.println(\"It's very hot outside.\");\n        } else if (temperature > 20) {\n            System.out.println(\"It's warm outside.\");\n        } else {\n            System.out.println(\"It's cold outside.\");\n        }\n    }\n}\n```\n\n```java\n\n// Output:\nIt's warm outside.\n```\n"
        },
        {
          "topicId": "C4-M3-T2",
          "topicTitle": "Loop Control Statements",
          "topicContent": "**Loop Control Statements**\n\nThese statements help control loops by managing how many times loops run or when they stop.\n\nMain loop control statements:\n- `break`: exits the loop immediately.\n- `continue`: skips current iteration and goes to next.\n\nExample:\n```java\nfor (int i = 1; i <= 5; i++) {\n    if (i == 3) {\n        break; // exits loop when i is 3\n    }\n    System.out.println(i);\n}\n```\n\n-------------\n\nExample program:\n```java\npublic class LoopControlDemo {\n    public static void main(String[] args) {\n        System.out.println(\"Using break:\");\n        for (int i = 1; i <= 5; i++) {\n            if (i == 3) {\n                break;\n            }\n            System.out.println(i);\n        }\n\n        System.out.println(\"Using continue:\");\n        for (int i = 1; i <= 5; i++) {\n            if (i == 3) {\n                continue; // skips printing 3\n            }\n            System.out.println(i);\n        }\n    }\n}\n```\n\n```java\n\n// Output:\nUsing break:\n1\n2\nUsing continue:\n1\n2\n4\n5\n```\n"
        },
        {
          "topicId": "C4-M3-T3",
          "topicTitle": "Break and Continue",
          "topicContent": "**Break and Continue Statements**\n\n- `break` stops the whole loop immediately.\n- `continue` skips the current loop iteration and moves to the next one.\n\nThey are useful for controlling loops more precisely.\n\nExample:\n```java\nint i = 0;\nwhile (i < 5) {\n    i++;\n    if (i == 3) {\n        continue; // skip when i is 3\n    }\n    System.out.println(i);\n}\n```\n\n-------------\n\nExample program:\n```java\npublic class BreakContinueDemo {\n    public static void main(String[] args) {\n        System.out.println(\"Loop with break:\");\n        for (int i = 1; i <= 5; i++) {\n            if (i == 4) {\n                break; // stop loop when i is 4\n            }\n            System.out.println(i);\n        }\n\n        System.out.println(\"Loop with continue:\");\n        for (int i = 1; i <= 5; i++) {\n            if (i == 4) {\n                continue; // skip printing 4\n            }\n            System.out.println(i);\n        }\n    }\n}\n```\n\n```java\n\n// Output:\nLoop with break:\n1\n2\n3\nLoop with continue:\n1\n2\n3\n5\n```\n"
        },
        {
          "topicId": "C4-M3-T4",
          "topicTitle": "Nested Control Structures",
          "topicContent": "**Nested Control Structures**\n\nYou can put control statements inside other control statements. This is called nesting.\n\nExample of nested `if` inside `for` loop:\n\n```java\nfor (int i = 1; i <= 3; i++) {\n    if (i % 2 == 0) {\n        System.out.println(i + \" is even.\");\n    } else {\n        System.out.println(i + \" is odd.\");\n    }\n}\n```\n\n-------------\n\nExample program:\n```java\npublic class NestedControlDemo {\n    public static void main(String[] args) {\n        int[][] numbers = {\n            {1, 2, 3},\n            {4, 5, 6}\n        };\n\n        for (int i = 0; i < numbers.length; i++) {\n            for (int j = 0; j < numbers[i].length; j++) {\n                if (numbers[i][j] % 2 == 0) {\n                    System.out.println(numbers[i][j] + \" is even.\");\n                } else {\n                    System.out.println(numbers[i][j] + \" is odd.\");\n                }\n            }\n        }\n    }\n}\n```\n\n```java\n\n// Output:\n1 is odd.\n2 is even.\n3 is odd.\n4 is even.\n5 is odd.\n6 is even.\n```\n"
        }
      ]
    },
    {
      "moduleId": "C4-M4",
      "moduleTitle": "Java Methods",
      "topics": [
        {
          "topicId": "C4-M4-T1",
          "topicTitle": "Defining and Calling Methods",
          "topicContent": "**Defining and Calling Methods**\n\nA method is a block of code that performs a task. You define it once and call it whenever needed.\n\n**Syntax:**\n```java\nreturnType methodName(parameters) {\n    // method body\n}\n```\n\nTo call a method:\n```java\nmethodName(arguments);\n```\n\n-------------\n\nExample:\n```java\npublic class MyClass {\n    // Method definition\n    static void sayHello() {\n        System.out.println(\"Hello, Java!\");\n    }\n\n    public static void main(String[] args) {\n        // Method call\n        sayHello();\n    }\n}\n```\n\n```java\n\n// Output:\nHello, Java!\n```\n"
        },
        {
          "topicId": "C4-M4-T2",
          "topicTitle": "Method Parameters and Return Types",
          "topicContent": "**Method Parameters and Return Types**\n\nParameters let you pass values into methods. Return type tells what type of value a method gives back.\n\n**Example with parameters and return type:**\n```java\npublic class MathOps {\n    static int add(int a, int b) {\n        return a + b;\n    }\n\n    public static void main(String[] args) {\n        int result = add(10, 5);\n        System.out.println(\"Sum: \" + result);\n    }\n}\n```\n\n```java\n\n// Output:\nSum: 15\n```\n"
        },
        {
          "topicId": "C4-M4-T3",
          "topicTitle": "Method Overloading",
          "topicContent": "**Method Overloading**\n\nMethod overloading means defining multiple methods with the same name but different parameters.\n\nJava chooses the right one based on the arguments you pass.\n\n-------------\n\nExample:\n```java\npublic class OverloadDemo {\n    static void greet() {\n        System.out.println(\"Hello!\");\n    }\n\n    static void greet(String name) {\n        System.out.println(\"Hello, \" + name);\n    }\n\n    public static void main(String[] args) {\n        greet();\n        greet(\"Nirmal\");\n    }\n}\n```\n\n```java\n\n// Output:\nHello!\nHello, Nirmal\n```\n"
        },
        {
          "topicId": "C4-M4-T4",
          "topicTitle": "Recursion in Java",
          "topicContent": "**Recursion in Java**\n\nRecursion is when a method calls itself to solve a smaller part of the problem.\n\nCommon use: factorial, Fibonacci, etc.\n\n-------------\n\nExample:\n```java\npublic class RecursionDemo {\n    static int factorial(int n) {\n        if (n == 1)\n            return 1;\n        return n * factorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Factorial of 5: \" + factorial(5));\n    }\n}\n```\n\n```java\n\n// Output:\nFactorial of 5: 120\n```\n"
        },
        {
          "topicId": "C4-M4-T5",
          "topicTitle": "Pass by Value in Java",
          "topicContent": "**Pass by Value in Java**\n\nIn Java, **all arguments are passed by value**, which means a copy of the variable is passed to the method.\n\nIf you change it inside the method, it doesn’t affect the original.\n\n-------------\n\nExample:\n```java\npublic class PassByValue {\n    static void changeValue(int num) {\n        num = 50;\n    }\n\n    public static void main(String[] args) {\n        int x = 10;\n        changeValue(x);\n        System.out.println(\"Value of x: \" + x);\n    }\n}\n```\n\n```java\n\n// Output:\nValue of x: 10\n```\n"
        }
      ]
    },
    {
      "moduleId": "C4-M5",
      "moduleTitle": "Java Arrays",
      "topics": [
        {
          "topicId": "C4-M5-T1",
          "topicTitle": "Introduction to Arrays",
          "topicContent": "**Introduction to Arrays**\n\nAn array is a container object that holds a fixed number of elements of the same type.\n\n**Syntax:**\n```java\nint[] numbers = new int[5];\n```\n\nYou can also directly assign values:\n```java\nint[] numbers = {1, 2, 3, 4, 5};\n```\n\n-------------\n\nExample:\n```java\npublic class ArrayIntro {\n    public static void main(String[] args) {\n        int[] nums = {10, 20, 30};\n        System.out.println(\"First Element: \" + nums[0]);\n    }\n}\n```\n\n```java\n\n// Output:\nFirst Element: 10\n```\n"
        },
        {
          "topicId": "C4-M5-T2",
          "topicTitle": "Single and Multi-dimensional Arrays",
          "topicContent": "**Single and Multi-dimensional Arrays**\n\n- **Single-dimensional array**: A simple list.\n- **Multi-dimensional array**: Like a table (2D, 3D, etc.).\n\n**2D Array Example:**\n```java\nint[][] matrix = {\n    {1, 2},\n    {3, 4}\n};\n```\n\n-------------\n\nExample:\n```java\npublic class MultiArray {\n    public static void main(String[] args) {\n        int[][] arr = {\n            {1, 2},\n            {3, 4}\n        };\n        System.out.println(\"Element at [1][0]: \" + arr[1][0]);\n    }\n}\n```\n\n```java\n\n// Output:\nElement at [1][0]: 3\n```\n"
        },
        {
          "topicId": "C4-M5-T3",
          "topicTitle": "Array Iteration and Sorting",
          "topicContent": "**Array Iteration and Sorting**\n\nTo iterate over an array, you can use a loop. To sort, use `Arrays.sort()`.\n\n-------------\n\nExample:\n```java\nimport java.util.Arrays;\n\npublic class ArraySort {\n    public static void main(String[] args) {\n        int[] nums = {5, 3, 1, 4, 2};\n        Arrays.sort(nums);\n        for (int n : nums) {\n            System.out.print(n + \" \");\n        }\n    }\n}\n```\n\n```java\n\n// Output:\n1 2 3 4 5 \n```\n"
        },
        {
          "topicId": "C4-M5-T4",
          "topicTitle": "Common Array Algorithms",
          "topicContent": "**Common Array Algorithms**\n\nSome common operations:\n- Find max/min\n- Calculate sum/average\n- Search element\n\n-------------\n\nExample - Find Maximum:\n```java\npublic class MaxElement {\n    public static void main(String[] args) {\n        int[] arr = {10, 25, 8, 15};\n        int max = arr[0];\n\n        for (int n : arr) {\n            if (n > max) max = n;\n        }\n\n        System.out.println(\"Max value: \" + max);\n    }\n}\n```\n\n```java\n\n// Output:\nMax value: 25\n```\n"
        },
        {
          "topicId": "C4-M5-T5",
          "topicTitle": "Arrays Utility Methods",
          "topicContent": "**Arrays Utility Methods**\n\nJava’s `Arrays` class provides many helpful methods:\n\n- `sort(array)` — Sorts array\n- `fill(array, value)` — Fills with value\n- `copyOf()` — Copies an array\n- `equals(a, b)` — Compares arrays\n\n-------------\n\nExample:\n```java\nimport java.util.Arrays;\n\npublic class ArrayUtils {\n    public static void main(String[] args) {\n        int[] a = {1, 2, 3};\n        int[] b = Arrays.copyOf(a, 3);\n        System.out.println(Arrays.equals(a, b));\n    }\n}\n```\n\n```java\n\n// Output:\ntrue\n```\n"
        }
      ]
    },
    {
      "moduleId": "C4-M6",
      "moduleTitle": "Java Strings",
      "topics": [
        {
          "topicId": "C4-M6-T1",
          "topicTitle": "String Class and Immutability",
          "topicContent": "**String Class and Immutability**\n\nIn Java, `String` is a class that represents a sequence of characters.\nStrings are **immutable**, which means once created, their value cannot be changed.\n\n**Example:**\n```java\npublic class StringExample {\n    public static void main(String[] args) {\n        String str = \"Hello\";\n        str.concat(\" World\");\n        System.out.println(str);\n    }\n}\n```\n\n```java\n\n// Output:\nHello\n```\n\nThe original string remains unchanged.\nTo change it, you must assign it:\n```java\nstr = str.concat(\" World\");\n```\n"
        },
        {
          "topicId": "C4-M6-T2",
          "topicTitle": "String Methods and Manipulation",
          "topicContent": "**String Methods and Manipulation**\n\nUseful methods:\n- `length()`\n- `charAt(index)`\n- `substring(start, end)`\n- `toUpperCase()` / `toLowerCase()`\n- `trim()`\n- `replace()`\n\n-------------\n\nExample:\n```java\npublic class StringMethods {\n    public static void main(String[] args) {\n        String name = \"  Java World  \";\n        System.out.println(name.trim().toUpperCase());\n    }\n}\n```\n\n```java\n\n// Output:\nJAVA WORLD\n```\n"
        },
        {
          "topicId": "C4-M6-T3",
          "topicTitle": "StringBuilder and StringBuffer",
          "topicContent": "**StringBuilder and StringBuffer**\n\nThese are **mutable** alternatives to String:\n- `StringBuilder` is faster but **not thread-safe**.\n- `StringBuffer` is **thread-safe** but slower.\n\n**StringBuilder Example:**\n```java\npublic class StringBuilderDemo {\n    public static void main(String[] args) {\n        StringBuilder sb = new StringBuilder(\"Java\");\n        sb.append(\" Programming\");\n        System.out.println(sb);\n    }\n}\n```\n\n```java\n\n// Output:\nJava Programming\n```\n"
        },
        {
          "topicId": "C4-M6-T4",
          "topicTitle": "String Formatting",
          "topicContent": "**String Formatting**\n\nYou can format strings using `String.format()` or `System.out.printf()`.\n\n**Placeholders:**\n- `%s` = string\n- `%d` = integer\n- `%f` = float\n\n-------------\n\nExample:\n```java\npublic class FormatExample {\n    public static void main(String[] args) {\n        String name = \"Alice\";\n        int age = 25;\n        System.out.printf(\"Name: %s, Age: %d\", name, age);\n    }\n}\n```\n\n```java\n\n// Output:\nName: Alice, Age: 25\n```\n"
        },
        {
          "topicId": "C4-M6-T5",
          "topicTitle": "Regular Expressions with Strings",
          "topicContent": "**Regular Expressions with Strings**\n\nRegular Expressions (regex) allow powerful string pattern matching.\n\nCommon methods:\n- `matches()`\n- `replaceAll()`\n- `split()`\n\n-------------\n\nExample:\n```java\npublic class RegexDemo {\n    public static void main(String[] args) {\n        String str = \"abc123\";\n        boolean result = str.matches(\"[a-z]+\\\\d+\");\n        System.out.println(result);\n    }\n}\n```\n\n```java\n\n// Output:\ntrue\n```\n"
        }
      ]
    },
    {
      "moduleId": "C4-M7",
      "moduleTitle": "Java OOPs Concepts",
      "topics": [
        {
          "topicId": "C4-M7-T1",
          "topicTitle": "Classes and Objects",
          "topicContent": "**Classes and Objects**\n\nA **class** is a blueprint for creating objects. It defines properties (fields) and behaviors (methods).\nAn **object** is an instance of a class.\n\n-------------\n\n**Example:**\n```java\nclass Car {\n    String color = \"Red\";\n    void start() {\n        System.out.println(\"Car started\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Car myCar = new Car();\n        myCar.start();\n        System.out.println(myCar.color);\n    }\n}\n```\n\n```java\n\n// Output:\nCar started\nRed\n```\n"
        },
        {
          "topicId": "C4-M7-T2",
          "topicTitle": "Constructors",
          "topicContent": "**Constructors**\n\nA **constructor** is a special method used to initialize objects. It has the same name as the class and no return type.\n\nTypes:\n- Default constructor\n- Parameterized constructor\n\n-------------\n\n**Example:**\n```java\nclass Student {\n    String name;\n    Student(String n) {\n        name = n;\n    }\n    void display() {\n        System.out.println(\"Name: \" + name);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Student s = new Student(\"John\");\n        s.display();\n    }\n}\n```\n\n```java\n\n// Output:\nName: John\n```\n"
        },
        {
          "topicId": "C4-M7-T3",
          "topicTitle": "Inheritance in Java",
          "topicContent": "**Inheritance in Java**\n\nInheritance allows a class (subclass) to inherit fields and methods from another class (superclass).\nUse the `extends` keyword.\n\n-------------\n\n**Example:**\n```java\nclass Animal {\n    void sound() {\n        System.out.println(\"Animal makes sound\");\n    }\n}\n\nclass Dog extends Animal {\n    void bark() {\n        System.out.println(\"Dog barks\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Dog d = new Dog();\n        d.sound();\n        d.bark();\n    }\n}\n```\n\n```java\n\n// Output:\nAnimal makes sound\nDog barks\n```\n"
        },
        {
          "topicId": "C4-M7-T4",
          "topicTitle": "Polymorphism: Overloading and Overriding",
          "topicContent": "**Polymorphism: Overloading and Overriding**\n\n**Polymorphism** allows the same method to perform different tasks:\n\n- **Method Overloading**: same method name, different parameters (compile-time)\n- **Method Overriding**: subclass changes the behavior of superclass method (runtime)\n\n-------------\n\n**Overloading Example:**\n```java\nclass Calculator {\n    int add(int a, int b) {\n        return a + b;\n    }\n    double add(double a, double b) {\n        return a + b;\n    }\n}\n```\n\n**Overriding Example:**\n```java\nclass Animal {\n    void sound() {\n        System.out.println(\"Generic sound\");\n    }\n}\n\nclass Cat extends Animal {\n    void sound() {\n        System.out.println(\"Meow\");\n    }\n}\n```\n"
        },
        {
          "topicId": "C4-M7-T5",
          "topicTitle": "Encapsulation and Abstraction",
          "topicContent": "**Encapsulation and Abstraction**\n\n**Encapsulation**: Wrapping data and methods in a single unit (class). Use `private` variables and `public` getters/setters.\n\n**Abstraction**: Hiding internal details and showing only essential features using `abstract` classes or `interfaces`.\n\n-------------\n\n**Encapsulation Example:**\n```java\nclass Person {\n    private String name;\n\n    public void setName(String n) {\n        name = n;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n```\n\n**Abstraction Example:**\n```java\nabstract class Shape {\n    abstract void draw();\n}\n\nclass Circle extends Shape {\n    void draw() {\n        System.out.println(\"Drawing Circle\");\n    }\n}\n```\n"
        }
      ]
    },
    {
      "moduleId": "C4-M8",
      "moduleTitle": "Java Interfaces",
      "topics": [
        {
          "topicId": "C4-M8-T1",
          "topicTitle": "What is an Interface?",
          "topicContent": "**What is an Interface?**\n\nAn **interface** is a reference type in Java. It’s like a contract that defines method signatures without implementing them.\n\n- It is used to achieve **abstraction**.\n- All methods in an interface are **public** and **abstract** by default.\n- A class can **implement** multiple interfaces.\n\n-------------\n\n**Example:**\n```java\ninterface Animal {\n    void makeSound();\n}\n\nclass Dog implements Animal {\n    public void makeSound() {\n        System.out.println(\"Bark\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Dog d = new Dog();\n        d.makeSound();\n    }\n}\n```\n\n```java\n\n// Output:\nBark\n```\n"
        },
        {
          "topicId": "C4-M8-T2",
          "topicTitle": "Implementing Interfaces",
          "topicContent": "**Implementing Interfaces**\n\nTo use an interface, a class must **implement** it using the `implements` keyword.\nThe class must provide **definitions** for all methods in the interface.\n\n-------------\n\n**Example:**\n```java\ninterface Printer {\n    void print();\n}\n\nclass HPPrinter implements Printer {\n    public void print() {\n        System.out.println(\"Printing from HP Printer\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        HPPrinter hp = new HPPrinter();\n        hp.print();\n    }\n}\n```\n\n```java\n\n// Output:\nPrinting from HP Printer\n```\n"
        },
        {
          "topicId": "C4-M8-T3",
          "topicTitle": "Multiple Interfaces and Inheritance",
          "topicContent": "**Multiple Interfaces and Inheritance**\n\nJava does **not support multiple inheritance** with classes, but **multiple interfaces** can be implemented.\n\nThis allows more flexibility and modularity.\n\n-------------\n\n**Example:**\n```java\ninterface A {\n    void methodA();\n}\n\ninterface B {\n    void methodB();\n}\n\nclass MyClass implements A, B {\n    public void methodA() {\n        System.out.println(\"Method A\");\n    }\n    public void methodB() {\n        System.out.println(\"Method B\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        MyClass obj = new MyClass();\n        obj.methodA();\n        obj.methodB();\n    }\n}\n```\n\n```java\n\n// Output:\nMethod A\nMethod B\n```\n"
        },
        {
          "topicId": "C4-M8-T4",
          "topicTitle": "Functional Interfaces",
          "topicContent": "**Functional Interfaces**\n\nA **functional interface** has exactly one abstract method.\nIt can be used with **lambda expressions**.\n\nCommon examples: `Runnable`, `Comparator`, `Callable`\n\nUse `@FunctionalInterface` annotation to define it.\n\n-------------\n\n**Example:**\n```java\n@FunctionalInterface\ninterface Greeting {\n    void sayHello();\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Greeting g = () -> System.out.println(\"Hello World\");\n        g.sayHello();\n    }\n}\n```\n\n```java\n\n// Output:\nHello World\n```\n"
        },
        {
          "topicId": "C4-M8-T5",
          "topicTitle": "Interfaces vs Abstract Classes",
          "topicContent": "**Interfaces vs Abstract Classes**\n\n| Feature | Interface | Abstract Class |\n|--------|-----------|----------------|\n| Multiple Inheritance | Yes | No |\n| Constructors | No | Yes |\n| Fields | Only constants | Can have variables |\n| Methods | Only abstract (Java 8+ allows default/static) | Can have both |\n\nUse **interface** when you want to define a contract for behavior.\nUse **abstract class** when you want partial implementation with shared code.\n\n-------------\n\n**Example:**\n```java\ninterface Vehicle {\n    void run();\n}\n\nabstract class Machine {\n    void start() {\n        System.out.println(\"Machine starting...\");\n    }\n}\n```\n"
        }
      ]
    },
    {
      "moduleId": "C4-M9",
      "moduleTitle": "Java Collections",
      "topics": [
        {
          "topicId": "C4-M9-T1",
          "topicTitle": "Collections Framework Overview",
          "topicContent": "**Collections Framework Overview**\n\nThe Java **Collections Framework** is a set of classes and interfaces used to store and manipulate groups of objects.\n\n**Key Interfaces:**\n- `List`\n- `Set`\n- `Queue`\n- `Map`\n\n**Key Benefits:**\n- Ready-made data structures\n- Reduces programming effort\n- Increases performance\n\n-------------\n\n**Example:**\n```java\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> names = new ArrayList<>();\n        names.add(\"Alice\");\n        names.add(\"Bob\");\n        System.out.println(names);\n    }\n}\n```\n\n```java\n\n// Output:\n[Alice, Bob]\n```\n"
        },
        {
          "topicId": "C4-M9-T2",
          "topicTitle": "List Interface: ArrayList, LinkedList",
          "topicContent": "**List Interface: ArrayList, LinkedList**\n\nThe `List` interface maintains **ordered collections**.\n\n- `ArrayList` is fast for random access.\n- `LinkedList` is better for insert/delete in the middle.\n\n-------------\n\n**ArrayList Example:**\n```java\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList<String> list = new ArrayList<>();\n        list.add(\"Java\");\n        list.add(\"Python\");\n        System.out.println(list);\n    }\n}\n```\n```java\n\n// Output:\n[Java, Python]\n```\n\n**LinkedList Example:**\n```java\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedList<Integer> nums = new LinkedList<>();\n        nums.add(1);\n        nums.add(2);\n        System.out.println(nums);\n    }\n}\n```\n```java\n\n// Output:\n[1, 2]\n```\n"
        },
        {
          "topicId": "C4-M9-T3",
          "topicTitle": "Set Interface: HashSet, TreeSet",
          "topicContent": "**Set Interface: HashSet, TreeSet**\n\nThe `Set` interface represents a collection of **unique elements**.\n\n- `HashSet`: No order, fast lookup.\n- `TreeSet`: Sorted order.\n\n-------------\n\n**HashSet Example:**\n```java\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Set<String> set = new HashSet<>();\n        set.add(\"A\");\n        set.add(\"B\");\n        set.add(\"A\"); // Duplicate\n        System.out.println(set);\n    }\n}\n```\n```java\n\n// Output:\n[A, B] or [B, A]\n```\n\n**TreeSet Example:**\n```java\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Set<Integer> tree = new TreeSet<>();\n        tree.add(5);\n        tree.add(2);\n        tree.add(9);\n        System.out.println(tree);\n    }\n}\n```\n```java\n\n// Output:\n[2, 5, 9]\n```\n"
        },
        {
          "topicId": "C4-M9-T4",
          "topicTitle": "Map Interface: HashMap, TreeMap",
          "topicContent": "**Map Interface: HashMap, TreeMap**\n\nA `Map` stores **key-value pairs**.\n\n- `HashMap`: Fast lookup, unordered.\n- `TreeMap`: Keys sorted.\n\n-------------\n\n**HashMap Example:**\n```java\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Map<Integer, String> map = new HashMap<>();\n        map.put(1, \"Apple\");\n        map.put(2, \"Banana\");\n        System.out.println(map);\n    }\n}\n```\n```java\n\n// Output:\n{1=Apple, 2=Banana}\n```\n\n**TreeMap Example:**\n```java\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        TreeMap<String, Integer> scores = new TreeMap<>();\n        scores.put(\"Alice\", 90);\n        scores.put(\"Bob\", 85);\n        System.out.println(scores);\n    }\n}\n```\n```java\n\n// Output:\n{Alice=90, Bob=85}\n```\n"
        },
        {
          "topicId": "C4-M9-T5",
          "topicTitle": "Iterating through Collections",
          "topicContent": "**Iterating through Collections**\n\nThere are several ways to iterate over a collection in Java:\n- `for` loop\n- `foreach` loop\n- `Iterator`\n- `Streams`\n\n-------------\n\n**For-each Example:**\n```java\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> list = Arrays.asList(\"A\", \"B\", \"C\");\n        for(String item : list) {\n            System.out.println(item);\n        }\n    }\n}\n```\n```java\n\n// Output:\nA\nB\nC\n```\n\n**Iterator Example:**\n```java\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> list = Arrays.asList(1, 2, 3);\n        Iterator<Integer> it = list.iterator();\n        while(it.hasNext()) {\n            System.out.println(it.next());\n        }\n    }\n}\n```\n```java\n\n// Output:\n1\n2\n3\n```\n"
        }
      ]
    },
    {
      "moduleId": "C4-M10",
      "moduleTitle": "Java Exception Handling",
      "topics": [
        {
          "topicId": "C4-M10-T1",
          "topicTitle": "Types of Exceptions",
          "topicContent": "**Types of Exceptions**\n\nIn Java, exceptions are problems that occur during the execution of a program.\n\nThere are two main types:\n\n1. **Checked Exceptions** – Checked at compile-time.\n   - e.g. `IOException`, `SQLException`\n2. **Unchecked Exceptions** – Occur at runtime.\n   - e.g. `NullPointerException`, `ArrayIndexOutOfBoundsException`\n\nAll exceptions are subclasses of the `Throwable` class.\n\n-------------\n\n**Example of Unchecked Exception:**\n```java\npublic class Main {\n    public static void main(String[] args) {\n        String str = null;\n        System.out.println(str.length());\n    }\n}\n```\n```java\n\n// Output:\nException in thread \"main\" java.lang.NullPointerException\n```\n"
        },
        {
          "topicId": "C4-M10-T2",
          "topicTitle": "Try-Catch-Finally Block",
          "topicContent": "**Try-Catch-Finally Block**\n\nJava provides a powerful way to handle exceptions using `try`, `catch`, and `finally`.\n\n- `try` – Wraps code that might throw an exception.\n- `catch` – Handles the exception.\n- `finally` – Always executes, even if an exception occurs.\n\n-------------\n\n**Example:**\n```java\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            int a = 10 / 0;\n        } catch (ArithmeticException e) {\n            System.out.println(\"Cannot divide by zero.\");\n        } finally {\n            System.out.println(\"This block always runs.\");\n        }\n    }\n}\n```\n```java\n\n// Output:\nCannot divide by zero.\nThis block always runs.\n```\n"
        },
        {
          "topicId": "C4-M10-T3",
          "topicTitle": "Throw and Throws Keywords",
          "topicContent": "**Throw and Throws Keywords**\n\n- `throw` is used to **explicitly throw** an exception.\n- `throws` is used to **declare** an exception.\n\n-------------\n\n**throw Example:**\n```java\npublic class Main {\n    public static void main(String[] args) {\n        throw new ArithmeticException(\"This is an error\");\n    }\n}\n```\n```java\n\n// Output:\nException in thread \"main\" java.lang.ArithmeticException: This is an error\n```\n\n**throws Example:**\n```java\nimport java.io.*;\n\npublic class Main {\n    public static void readFile() throws IOException {\n        FileReader file = new FileReader(\"test.txt\");\n    }\n\n    public static void main(String[] args) throws IOException {\n        readFile();\n    }\n}\n```\n```java\n\n// Output:\nException in thread \"main\" java.io.FileNotFoundException: test.txt (No such file or directory)\n```\n"
        },
        {
          "topicId": "C4-M10-T4",
          "topicTitle": "Custom Exceptions",
          "topicContent": "**Custom Exceptions**\n\nYou can create your own exception class by extending `Exception` or `RuntimeException`.\n\n-------------\n\n**Example:**\n```java\nclass MyException extends Exception {\n    public MyException(String message) {\n        super(message);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            throw new MyException(\"Custom Error Message\");\n        } catch (MyException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n```\n```java\n\n// Output:\nCustom Error Message\n```\n"
        },
        {
          "topicId": "C4-M10-T5",
          "topicTitle": "Best Practices",
          "topicContent": "**Best Practices**\n\n1. Catch specific exceptions (avoid generic `Exception`).\n2. Use meaningful error messages.\n3. Clean up resources in `finally` or use try-with-resources.\n4. Don’t ignore exceptions.\n5. Don’t use exceptions for flow control.\n\n-------------\n\n**Example - Try-with-resources (Java 7+):**\n```java\nimport java.io.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        try (BufferedReader br = new BufferedReader(new FileReader(\"test.txt\"))) {\n            System.out.println(br.readLine());\n        } catch (IOException e) {\n            System.out.println(\"File error: \" + e.getMessage());\n        }\n    }\n}\n```\n```java\n\n// Output:\nFile error: test.txt (No such file or directory)\n```\n"
        }
      ]
    },
    {
      "moduleId": "C4-M11",
      "moduleTitle": "Java Multithreading",
      "topics": [
        {
          "topicId": "C4-M11-T1",
          "topicTitle": "Introduction to Threads",
          "topicContent": "**Introduction to Threads**\n\nA **thread** is a lightweight process. It is a separate path of execution.\nJava allows you to run multiple threads simultaneously, enabling multitasking.\n\n**Main Thread** – Every Java program has a default thread called the main thread.\n\n-------------\n\n**Example:**\n```java\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(Thread.currentThread().getName());\n    }\n}\n```\n```java\n\n// Output:\nmain\n```\n"
        },
        {
          "topicId": "C4-M11-T2",
          "topicTitle": "Creating Threads: Thread and Runnable",
          "topicContent": "**Creating Threads: Thread and Runnable**\n\nThere are two main ways to create threads in Java:\n1. Extending the `Thread` class\n2. Implementing the `Runnable` interface\n\n-------------\n\n**1. Using Thread class:**\n```java\nclass MyThread extends Thread {\n    public void run() {\n        System.out.println(\"Thread is running...\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        MyThread t = new MyThread();\n        t.start();\n    }\n}\n```\n```java\n\n// Output:\nThread is running...\n```\n\n**2. Using Runnable interface:**\n```java\nclass MyRunnable implements Runnable {\n    public void run() {\n        System.out.println(\"Runnable thread running...\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Thread t = new Thread(new MyRunnable());\n        t.start();\n    }\n}\n```\n```java\n\n// Output:\nRunnable thread running...\n```\n"
        },
        {
          "topicId": "C4-M11-T3",
          "topicTitle": "Thread Lifecycle and Methods",
          "topicContent": "**Thread Lifecycle and Methods**\n\nA thread has the following lifecycle stages:\n- **New** → Created but not started\n- **Runnable** → Started and ready to run\n- **Running** → Actively executing\n- **Blocked/Waiting** → Waiting for resources\n- **Terminated** → Execution completed\n\n-------------\n\n**Common Thread Methods:**\n- `start()` – Begins execution\n- `run()` – Contains code to execute\n- `sleep(ms)` – Pauses execution\n- `join()` – Waits for thread to finish\n- `isAlive()` – Checks if thread is active\n\n**Example:**\n```java\npublic class Main extends Thread {\n    public void run() {\n        System.out.println(\"Thread running\");\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        Main t = new Main();\n        t.start();\n        t.join();\n        System.out.println(\"Main ends\");\n    }\n}\n```\n```java\n\n// Output:\nThread running\nMain ends\n```\n"
        },
        {
          "topicId": "C4-M11-T4",
          "topicTitle": "Synchronization in Java",
          "topicContent": "**Synchronization in Java**\n\nWhen multiple threads access shared resources, it can cause issues. **Synchronization** ensures only one thread accesses a block of code at a time.\n\nUse the `synchronized` keyword.\n\n-------------\n\n**Example:**\n```java\nclass Counter {\n    int count = 0;\n\n    synchronized void increment() {\n        count++;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        Counter c = new Counter();\n\n        Thread t1 = new Thread(() -> {\n            for (int i = 0; i < 1000; i++) c.increment();\n        });\n\n        Thread t2 = new Thread(() -> {\n            for (int i = 0; i < 1000; i++) c.increment();\n        });\n\n        t1.start();\n        t2.start();\n\n        t1.join();\n        t2.join();\n\n        System.out.println(\"Final count: \" + c.count);\n    }\n}\n```\n```java\n\n// Output:\nFinal count: 2000\n```\n"
        },
        {
          "topicId": "C4-M11-T5",
          "topicTitle": "Concurrency Utilities (Executors)",
          "topicContent": "**Concurrency Utilities (Executors)**\n\nJava provides **Executors** in `java.util.concurrent` to manage thread pools.\n\nBenefits:\n- Better thread management\n- Reusability\n- Performance optimization\n\n-------------\n\n**Example:**\n```java\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class Main {\n    public static void main(String[] args) {\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n\n        executor.execute(() -> System.out.println(\"Task 1 running\"));\n        executor.execute(() -> System.out.println(\"Task 2 running\"));\n\n        executor.shutdown();\n    }\n}\n```\n```java\n\n// Output:\nTask 1 running\nTask 2 running\n```\n"
        }
      ]
    },
    {
      "moduleId": "C4-M12",
      "moduleTitle": "Java File Handling",
      "topics": [
        {
          "topicId": "C4-M12-T1",
          "topicTitle": "File Class and Operations",
          "topicContent": "**File Class and Operations**\n\nJava provides the `File` class in `java.io` package to work with files and directories.\nYou can create, delete, check existence, get path, etc.\n\n-------------\n\n**Example:**\n```java\nimport java.io.File;\n\npublic class Main {\n    public static void main(String[] args) {\n        File file = new File(\"example.txt\");\n\n        if (file.exists()) {\n            System.out.println(\"File exists: \" + file.getName());\n        } else {\n            System.out.println(\"File does not exist.\");\n        }\n    }\n}\n```\n```java\n\n// Output:\nFile does not exist.\n```\n"
        },
        {
          "topicId": "C4-M12-T2",
          "topicTitle": "Reading and Writing Text Files",
          "topicContent": "**Reading and Writing Text Files**\n\nJava allows reading and writing files using `FileReader`, `FileWriter`, or using `Files` class.\n\n-------------\n\n**Writing to a File:**\n```java\nimport java.io.FileWriter;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            FileWriter writer = new FileWriter(\"data.txt\");\n            writer.write(\"Hello, Java File Handling!\");\n            writer.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n```java\n\n// Output:\n// File data.txt will be created with written content.\n```\n\n**Reading from a File:**\n```java\nimport java.io.FileReader;\nimport java.io.BufferedReader;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            BufferedReader reader = new BufferedReader(new FileReader(\"data.txt\"));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                System.out.println(line);\n            }\n            reader.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n```java\n\n// Output:\nHello, Java File Handling!\n```\n"
        },
        {
          "topicId": "C4-M12-T3",
          "topicTitle": "BufferedReader and BufferedWriter",
          "topicContent": "**BufferedReader and BufferedWriter**\n\n`BufferedReader` and `BufferedWriter` provide efficient reading and writing of text files.\n\n-------------\n\n**Example:**\n```java\nimport java.io.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        try {\n            BufferedWriter writer = new BufferedWriter(new FileWriter(\"buffered.txt\"));\n            writer.write(\"Buffered write example.\");\n            writer.close();\n\n            BufferedReader reader = new BufferedReader(new FileReader(\"buffered.txt\"));\n            String line = reader.readLine();\n            System.out.println(line);\n            reader.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n```java\n\n// Output:\nBuffered write example.\n```\n"
        },
        {
          "topicId": "C4-M12-T4",
          "topicTitle": "Working with Directories",
          "topicContent": "**Working with Directories**\n\nYou can use the `File` class to create and manage directories in Java.\n\n-------------\n\n**Example:**\n```java\nimport java.io.File;\n\npublic class Main {\n    public static void main(String[] args) {\n        File dir = new File(\"myfolder\");\n        if (!dir.exists()) {\n            dir.mkdir();\n            System.out.println(\"Directory created.\");\n        } else {\n            System.out.println(\"Directory already exists.\");\n        }\n    }\n}\n```\n```java\n\n// Output:\nDirectory created.\n```\n"
        },
        {
          "topicId": "C4-M12-T5",
          "topicTitle": "Java NIO Basics",
          "topicContent": "**Java NIO Basics**\n\nJava NIO (New I/O) offers improved performance and scalability for file and data operations.\nKey classes: `Files`, `Paths`, `Path`, `StandardOpenOption`\n\n-------------\n\n**Example using Files and Paths:**\n```java\nimport java.nio.file.*;\nimport java.io.IOException;\n\npublic class Main {\n    public static void main(String[] args) {\n        Path path = Paths.get(\"nio-example.txt\");\n        try {\n            Files.write(path, \"Hello NIO\".getBytes());\n            String content = Files.readString(path);\n            System.out.println(content);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n```java\n\n// Output:\nHello NIO\n```\n"
        }
      ]
    },
    {
      "moduleId": "C4-M13",
      "moduleTitle": "Java Input-Output",
      "topics": [
        {
          "topicId": "C4-M13-T1",
          "topicTitle": "Java I/O Streams Overview",
          "topicContent": "**Java I/O Streams Overview**\n\nJava uses streams to perform input and output (I/O) operations. Streams are sequences of data flowing from a source to a destination.\nThere are two main types:\n- **Byte Streams:** Handle binary data (`InputStream`, `OutputStream`)\n- **Character Streams:** Handle character data (`Reader`, `Writer`)\n\nStreams allow reading and writing data efficiently.\n\n-------------\n\n**Example:**\n```java\nimport java.io.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Using InputStream and OutputStream (byte streams)\n        try (InputStream in = new FileInputStream(\"input.txt\");\n             OutputStream out = new FileOutputStream(\"output.txt\")) {\n            int data;\n            while ((data = in.read()) != -1) {\n                out.write(data);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n```java\n\n// Output:\n// Copies content of input.txt to output.txt byte by byte.\n```\n"
        },
        {
          "topicId": "C4-M13-T2",
          "topicTitle": "Byte Streams vs Character Streams",
          "topicContent": "**Byte Streams vs Character Streams**\n\n- **Byte Streams:** Read/write 8-bit bytes; useful for binary data like images, audio.\n- **Character Streams:** Read/write 16-bit characters; useful for text files, supporting Unicode.\n\nUse character streams (`Reader`/`Writer`) for text to handle encoding correctly.\n\n-------------\n\n**Example of Character Streams:**\n```java\nimport java.io.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        try (Reader reader = new FileReader(\"textfile.txt\")) {\n            int c;\n            while ((c = reader.read()) != -1) {\n                System.out.print((char) c);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n```java\n\n// Output:\n// Prints the content of textfile.txt as characters.\n```\n"
        },
        {
          "topicId": "C4-M13-T3",
          "topicTitle": "InputStream and OutputStream Classes",
          "topicContent": "**InputStream and OutputStream Classes**\n\nThese are the base abstract classes for byte streams.\n- `InputStream` reads bytes\n- `OutputStream` writes bytes\n\nCommon subclasses include `FileInputStream` and `FileOutputStream` for file operations.\n\n-------------\n\n**Example:**\n```java\nimport java.io.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        try (InputStream in = new FileInputStream(\"source.dat\");\n             OutputStream out = new FileOutputStream(\"dest.dat\")) {\n            byte[] buffer = new byte[1024];\n            int length;\n            while ((length = in.read(buffer)) > 0) {\n                out.write(buffer, 0, length);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n```java\n\n// Output:\n// Copies source.dat to dest.dat in chunks of 1024 bytes.\n```\n"
        },
        {
          "topicId": "C4-M13-T4",
          "topicTitle": "Serialization and Deserialization",
          "topicContent": "**Serialization and Deserialization**\n\nSerialization means converting an object into a byte stream for storage or transmission.\nDeserialization is converting the byte stream back into an object.\n\nClasses must implement `Serializable` interface to support this.\n\n-------------\n\n**Example:**\n```java\nimport java.io.*;\n\nclass Person implements Serializable {\n    String name;\n    int age;\n\n    Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Person person = new Person(\"John\", 30);\n\n        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"person.ser\"))) {\n            oos.writeObject(person);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"person.ser\"))) {\n            Person p = (Person) ois.readObject();\n            System.out.println(\"Name: \" + p.name + \", Age: \" + p.age);\n        } catch (IOException | ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n```java\n\n// Output:\nName: John, Age: 30\n```\n"
        },
        {
          "topicId": "C4-M13-T5",
          "topicTitle": "Scanner and Console Input",
          "topicContent": "**Scanner and Console Input**\n\n`Scanner` class helps to read user input from keyboard easily.\n`Console` class provides methods for reading input securely (passwords, etc.).\n\n-------------\n\n**Example using Scanner:**\n```java\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter your name: \");\n        String name = scanner.nextLine();\n        System.out.println(\"Hello, \" + name + \"!\");\n        scanner.close();\n    }\n}\n```\n```java\n\n// Output:\n// Enter your name: Alice\n// Hello, Alice!\n```\n"
        }
      ]
    }
  ]
}
