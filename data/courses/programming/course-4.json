{
    "id": "C4",
    "index": 3,
    "slug": "course-4",
    "language": "Java",
    "courseTitle": "Learn Java Programming",
    "courseDescription": "Dive into Java programming from basics to advanced concepts including OOP, collections, and concurrency.",
    "courseBannerImageLink": "https://raw.githubusercontent.com/nirmalravidas/e-learning-programming-course-app-server/main/public/images/courses/java/banner_image.png",
    "pricingType": "free",
    "bookmarked": false,
    "modules": [
        {
            "moduleId": "C4-M1",
            "moduleTitle": "Java Overview",
            "topics": [
                [
                    {
                        "topicId": "C4-M1-T1",
                        "topicTitle": "What is Java?",
                        "topicContent": "**What is Java?**\n\nJava is a popular programming language created by Sun Microsystems in 1995. It is designed to be simple, portable, and easy to use.\n\n**Key points:**\n- Java is **platform-independent**, meaning you can write Java code once and run it anywhere without changes.\n- It is an **object-oriented** language, which means it organizes software design around data, or objects, rather than functions and logic.\n- Java runs on the **Java Virtual Machine (JVM)**, which translates Java bytecode into machine code for your computer.\n\n-------------\n\n**Example:** Your first Java program looks like this:\n```java\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\nThis program prints the message \"Hello, World!\" on the screen.\n\n```java\nOutput:\n\nHello, World!\n```\n"
                    },
                    {
                        "topicId": "C4-M1-T2",
                        "topicTitle": "Features of Java",
                        "topicContent": "**Features of Java**\n\nJava has many features that make it a powerful and widely-used language:\n\n- **Simple:** Java has a clean and easy-to-understand syntax.\n- **Object-Oriented:** Everything in Java is treated as an object.\n- **Platform Independent:** Thanks to the JVM, Java programs can run on different platforms like Windows, Mac, or Linux without modification.\n- **Robust:** Java provides strong memory management and exception handling, which helps reduce errors.\n- **Secure:** Java provides a secure environment to develop and run applications.\n- **Multithreaded:** Java supports multiple threads, which lets your program do many things at once.\n- **High Performance:** Java uses Just-In-Time (JIT) compiler to speed up execution.\n\n-------------\n\n**Example:** Creating a thread in Java\n```java\nclass MyThread extends Thread {\n    public void run() {\n        System.out.println(\"Thread is running\");\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        MyThread t = new MyThread();\n        t.start();\n    }\n}\n```\n\nThis program creates and starts a new thread.\n\n```java\nOutput:\n\nThread is running\n```\n"
                    },
                    {
                        "topicId": "C4-M1-T3",
                        "topicTitle": "Java Platform (JDK, JRE, JVM)",
                        "topicContent": "**Understanding the Java Platform:**\n\nJava platform consists of three main components:\n\n- **JDK (Java Development Kit):** This is the full kit used by developers. It contains tools like the compiler (`javac`), debugger, and other utilities needed to write, compile, and debug Java programs.\n\n- **JRE (Java Runtime Environment):** This includes everything you need to run a Java program, such as the JVM and standard Java class libraries. It does NOT include developer tools like the compiler.\n\n- **JVM (Java Virtual Machine):** The JVM is responsible for running Java bytecode on any device or operating system. It acts as an interpreter between the Java program and your computerâ€™s operating system.\n\n-------------\n\n**Visual Flow:**\n\n```\nJava Source Code (.java) -> Compiler (javac) -> Bytecode (.class) -> JVM -> Machine Code -> Run\n```\n\n-------------\n\n**Example:** Compiling and running a Java program\n```java\n// Compile\njavac HelloWorld.java\n\n// Run\njava HelloWorld\n```\n\nThe compiler converts your source code into bytecode, and the JVM runs it.\n"
                    },
                    {
                        "topicId": "C4-M1-T4",
                        "topicTitle": "Installing Java and Setup",
                        "topicContent": "**How to Install Java:**\n\nFollow these simple steps to install Java on your computer:\n\n1. **Download the JDK:** Go to the official [Oracle Java SE Downloads](https://www.oracle.com/java/technologies/javase-downloads.html) page or use OpenJDK.\n2. **Install the JDK:** Run the installer and follow the instructions.\n3. **Set Environment Variables:**\n   - Set `JAVA_HOME` to point to the folder where JDK is installed.\n   - Add `JAVA_HOME/bin` to your system `PATH` to access Java commands from any directory.\n\n4. **Verify the Installation:** Open the command prompt or terminal and type:\n```java\njava -version\njavac -version\n```\nYou should see the installed Java version.\n\n-------------\n\n**Example Output:**\n```java\nOutput:\n\njava version \"17.0.1\" 2021-10-19 LTS\nJava(TM) SE Runtime Environment (build 17.0.1+12-LTS-39)\nJava HotSpot(TM) 64-Bit Server VM (build 17.0.1+12-LTS-39, mixed mode, sharing)\n```\n"
                    },
                    {
                        "topicId": "C4-M1-T5",
                        "topicTitle": "Your First Java Program",
                        "topicContent": "**Let's Write Your First Java Program!**\n\n1. Open a text editor and create a file named `HelloWorld.java`.\n2. Type the following code:\n```java\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\n3. Save the file.\n4. Open your terminal or command prompt and navigate to the folder where you saved the file.\n5. Compile the program by typing:\n```java\njavac HelloWorld.java\n```\nThis creates a file called `HelloWorld.class` (the bytecode).\n6. Run the program by typing:\n```java\njava HelloWorld\n```\n\n-------------\n\n**Output:**\n```java\nOutput:\n\nHello, World!\n```\n\nCongratulations! You have successfully written, compiled, and run your first Java program.\n"
                    }
]

            ]
        },

        {
            "moduleId": "C4-M2",
            "moduleTitle": "Java Basics",
            "topics": [
                {
                "topicId": "C4-M2-T1",
                "topicTitle": "Variables and Data Types",
                "topicContent": "Java supports various data types like int, float, char, boolean, and reference types like arrays and objects."
                },

                {
                "topicId": "C4-M2-T2",
                "topicTitle": "Control Statements",
                "topicContent": "Java provides control statements like if-else, switch, for loop, while loop, and do-while loop for decision making and looping."
                }
            ]
        },

        {
            "moduleId": "C4-M3",
            "moduleTitle": "Java Flow Control",
            "topics": [
                {   
                    "topicId": "C4-M3-T1",
                    "topicTitle": "Classes and Objects",
                    "topicContent": "In Java, a class is a blueprint for creating objects. An object is an instance of a class. A class can have attributes and methods."
                }
            ]
        },

        {
            "moduleId": "C4-M4",
            "moduleTitle": "Java Methods",
            "topics": [
                {
                    "topicId": "C4-M4-T1",
                    "topicTitle": "Arrays",
                    "topicContent": "An array is a collection of elements of the same type. It is a fixed-sized data structure that stores a group of elements of the same type."
                },
                {
                    "topicId": "C4-M4-T2",
                    "topicTitle": "Lists",
                    "topicContent": "A list is a collection of elements that can be dynamically resized. It is an ordered collection of elements that allows duplicate elements."
                },
                {
                    "topicId": "C4-M4-T3",
                    "topicTitle": "Maps",
                    "topicContent": "A map is a collection of key-value pairs. It is an unordered collection of elements that allows duplicate keys."
                },
                {
                    "topicId": "C4-M4-T4",
                    "topicTitle": "Sets",
                    "topicContent": "A set is a collection of unique elements. It is an unordered collection of elements that does not allow duplicate elements."
                }
            ]
        },

        {
            "moduleId": "C4-M5",
            "moduleTitle": "Java Arrays",
            "topics": [
                {
                    "topicId": "C4-M5-T1",
                    "topicTitle": "Collections Framework",
                    "topicContent": "The Java Collections Framework provides a set of interfaces and classes for storing, organizing, and manipulating collections of objects."
                }
            ]
        },

        {
            "moduleId": "C4-M6",
            "moduleTitle": "Java Strings",
            "topics": [
                {
                    "topicId": "C4-M6-T1",
                    "topicTitle": "Collections Framework",
                    "topicContent": "The Java Collections Framework provides a set of interfaces and classes for storing, organizing, and manipulating collections of objects."
                }
            ]
        },

        {
            "moduleId": "C4-M7",
            "moduleTitle": "Java OOPs Concepts",
            "topics": [
                {
                    "topicId": "C4-M7-T1",
                    "topicTitle": "Collections Framework",
                    "topicContent": "The Java Collections Framework provides a set of interfaces and classes for storing, organizing, and manipulating collections of objects."
                }
            ]
        },

        {
            "moduleId": "C4-M8",
            "moduleTitle": "Java Interfaces",
            "topics": [
                {
                    "topicId": "C4-M8-T1",
                    "topicTitle": "Collections Framework",
                    "topicContent": "The Java Collections Framework provides a set of interfaces and classes for storing, organizing, and manipulating collections of objects."
                }
            ]
        },

        {
            "moduleId": "C4-M9",
            "moduleTitle": "Java Collections",
            "topics": [
                {
                    "topicId": "C4-M9-T1",
                    "topicTitle": "Collections Framework",
                    "topicContent": "The Java Collections Framework provides a set of interfaces and classes for storing, organizing, and manipulating collections of objects."
                }
            ]
        },

        {
            "moduleId": "C4-M10",
            "moduleTitle": "Java Exception Handling",
            "topics": [
                {
                    "topicId": "C4-M10-T1",
                    "topicTitle": "Collections Framework",
                    "topicContent": "The Java Collections Framework provides a set of interfaces and classes for storing, organizing, and manipulating collections of objects."
                }
            ]
        },

        {
            "moduleId": "C4-M11",
            "moduleTitle": "Java Multithreading",
            "topics": [
                {
                    "topicId": "C4-M11-T1",
                    "topicTitle": "Collections Framework",
                    "topicContent": "The Java Collections Framework provides a set of interfaces and classes for storing, organizing, and manipulating collections of objects."
                }
            ]
        },

        {
            "moduleId": "C4-M12",
            "moduleTitle": "Java File Handling",
            "topics": [
                {
                    "topicId": "C4-M12-T1",
                    "topicTitle": "Collections Framework",
                    "topicContent": "The Java Collections Framework provides a set of interfaces and classes for storing, organizing, and manipulating collections of objects."
                }
            ]
        },

        {
            "moduleId": "C4-M13",
            "moduleTitle": "Java Input-Output",
            "topics": [
                {
                    "topicId": "C4-M13-T1",
                    "topicTitle": "Collections Framework",
                    "topicContent": "The Java Collections Framework provides a set of interfaces and classes for storing, organizing, and manipulating collections of objects."
                }
            ]
        }




    ]
}
